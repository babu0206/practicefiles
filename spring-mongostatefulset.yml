apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springboot
  template:
    metadata:
      name: springbootpod
      labels:
        app: springboot
    spec:
      containers:
      - name: springappcontainer
        image: knagarjunareddy/spring-boot-app
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongo
        - name: MONGO_DB_USERNAME
          value: naga
        - name: MONGO_DB_PASSWORD
          value: naga45  
---
apiVersion: v1
kind: Service
metadata:
  name: springappsvc
spec:
  type: NodePort
  selector:
    app: springboot
  ports:
  - ports:
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  serviceName: mongo
  template:
    metadata:
      name: mongopod
      labels:
        app: mongo
    spec:
      containers:
      - name: mongocont
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: naga
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: naga45  
        volumeMounts:
        - name: mongo-pv
          mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-pv
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: manual
---     
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  clusterIP: None      
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hostpathpv
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: manual
  hostPath:
    path: /tmp      
